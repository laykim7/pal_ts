/*
 * MPS-Pico8 Linux Driver
 *
 *  Copyright (C) 2018 CAEN ELS s.r.l.
 *
 *  Paolo Scarbolo <p.scarbolo@caenels.com>
 *
 *  Copyright 2016 Board of Trustees of Michigan State University
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License v2 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * \file
 * \brief AMC-Pico8 address map
 */

#ifndef MPS_PICO_REGS_H_
#define MPS_PICO_REGS_H_

#define MPS_PICO_SUBVENDOR_ID	(0xCAE2)
#define MPS_PICO_SUBDEVICE_ID	(0x71C0)

/* module adresses */
#define PICO_ADDR	(0x0)
#define DMA_ADDR	(0x10000)   // DMA Engine of 1 MHz data
#define DMA2_ADDR	(0x18000)   // DMA Engine of 1 kHz data
#define MUX_ADDR	(0x20000)   // DMA Mux of 1 MHz data
#define MUX2_ADDR	(0x28000)   // DMA Mux of 1 kHz data
#define USER_ADDR   (0x30000)
#define INTR_ADDR	(0x40000)

/* on DMA_ADDR */
#define DMA_OFFSET_STATUS	(0x0)
#define DMA_OFFSET_CONTROL	(0x4)
#define DMA_OFFSET_CMD		(0x8)
#define DMA_OFFSET_ADDR		(0xC)
#define DMA_OFFSET_LEN		(0x10)
#define DMA_OFFSET_RESP_LEN	(0x14)
#define DMA_OFFSET_RESP_ADDR	(0x18)


/* on PICO_ADDR */
#define PICO_CONV_TRG		(0x4)
#define PICO_CONV_GEN		(0x8)
#define RING_BUFF_OFFS_DELAY	(0xC)
#define TRG_OFFS_CTRL		(0x10)
#define TRG_OFFS_LIMIT		(0x14)
#define TRG_OFFS_NRSAMP		(0x18)
#define FPGA_VER_OFFSET		(0x78)
#define FPGA_TS_OFFSET		(0x7C)

#define PICO_CLK_FREQ		(300000000)
#define PICO_CONV_MAX		(2048)
#define PICO_ADC_MAX_FREQ	(1000000)

#define TRG_CTRL_CH_SHIFT	(8)

// PICO_MOVING_AVERAGE -------------------------------------------
#define PICO_MOVING_AVERAGE (0x200)
#define PICO_MA_CTRL        (0x08)   // reset this register to clear MPS and Moving average accumulators (0x1)
                                     // set Trigger mode (0x3) and keep MPS low
#define PICO_MA_NSAMP       (0x0C)
#define PICO_MA_THRESHOLD   (0x18)
#define OVER_THRESHOLD_BA   (0x88)   // over threshold base address
#define PICO_MPS_CTRL_MANUAL    (0x94)   // MPS Manual signal generation
#define PICO_MPS_CTRL_CONFIG    (0x98)   // MPS configuration register
#define PICO_MPS_CTRL_STATUS    (0x9C)   // MPS configuration status
#define PICO_RT_DATA_1M         (0xA0)   // base address for real time AVG and STD at 1M
#define PICO_MA_TRG_CNTR_1M (0xE0)   // counter of 1 MHz samples in Trigger Mode
#define PICO_MA_TRG_CNTR_1K (0xE4)   // counter of 1 kHz samples in Trigger Mode
#define PICO_MA_TRG_NRSAMP  (0xE8)   // Set number of trigger samples (in unit of 1 MHz samples)
#define PICO_MA_TRG_NRSAMP_1K   (0xEC)   // Get number of trigger samples at 1k (in unit of 1 kHz samples)
#define PICO_MA_TRG_DELAY       (0xF0)   // Set number of delay samples (in unit of 1 MHz samples)
#define PICO_MA_TRG_IN_CNTR     (0xF4)   // Get number of trigger in impulses
#define PICO_MA_TRG_DONE_CNTR   (0xF8)   // Get number of trigger signals generated by trigger module
#define PICO_MA_BUFFER_INDEX    (0xFC)   // [31:16] last write index buffer 1kHz, [15:0] last write index buffer 1MHz
#define PICO_RT_DATA_1K         (0x100)  // base address for real time AVG and STD at 1k

/* */
#define MUX_TRG_MASK		(0x7)
#define MUX_TRG_SHIFT		(0)
#define MUX_CONV_MASK		(0x7)
#define MUX_CONV_SHIFT		(8)

/* DMA register masks */
#define DMA_CTRL_MASK_ENABLE	(0x00000100)    // Enables the DMA engine
#define DMA_CTRL_MASK_RESET	    (0x00000001)    // reset the DMA engine, it's automatically cleared

#define DMA_CMD_MASK_DMA_GO	    (0x80000000)
#define DMA_CMD_MASK_GEN_IRQ	(0x08000000)

/* on INTR */
/* Introduced in FW version 0x0001000b */
/* constant 0x157C5721 */
#define INTR_ID (INTR_ADDR+0x0)
#define INTR_STATUS (INTR_ADDR+0x4)
/* bit indicating whether device think MSI is enabld */
#define INTR_STATUS_MSI_EN (1<<8)
/* bit indicating whether an interrupt is latched (INTR_LATCH is non-zero) */
#define INTR_STATUS_ACT    (1<<0)
/* unused #define INTR_CONTROL (INTR_ADDR+0x8) */
/* bit mask of all interrupt sources */
#define INTR_LATCH (INTR_ADDR+0xc)
/* bit mask.  write to clear per interrupt source */
#define INTR_CLEAR (INTR_ADDR+0x10)
/* bit mask.  write to un-mask per interrupt source */
#define INTR_ENABLE (INTR_ADDR+0x14)

/* mask for both INTR_LATCH and INTR_CLEAR.
 * HW impliments 8 bits.
 */
#define INTR_DMA_DONE 0x1
#define INTR_USER 0x2
#define INTR_DMA2_DONE 0x4
#define INTR_MASK (INTR_DMA_DONE|INTR_USER|INTR_DMA2_DONE)

/** Registers specific to FRIB local firmware.
 */
#ifdef CONFIG_MPS_PICO_FRIB

#define FRIB_CAP_FIRST (USER_ADDR+0x100)
#define FRIB_CAP_LAST  (USER_ADDR+0x1AC)

#define USER_ID (USER_ADDR+0)
#define USER_STATUS (USER_ADDR+0x4)
#define USER_CONTROL (USER_ADDR+0x8)

#define FRIB_VERSION  (USER_ADDR+4*0x10)
#endif /* CONFIG_MPS_PICO_FRIB */

#endif /* MPS_PICO_REGS_H_ */
